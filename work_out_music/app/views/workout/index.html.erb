<img class="player_bg" src="<%= @bgimage %>"/>
<div class="container workout-container">

  <h1 class="workout-header">Workout Music</h1>

	<div class="youtube">
    <div class="video_box">
      <!--
      <iframe width="560" height="315"
      src="https://www.youtube.com/embed/<%= @video_id %>
      ?loop=1
      &showinfo=0
      &fs=0
      &controlls=0
      &autoplay=1
	    &mute=0
      &rel=0
      &playlist=<%= @video_id %>
      &modestbranding=0
      &start=1"
      frameborder="0" allowfullscreen>
      </iframe>
      -->
      <iframe width="560" height="315" src="https://www.youtube.com/embed/<%= @video_id %>" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>

  <%= link_to(image_tag('/re_select_btn.png', class: "re_select_btn"), "/select") %>
  <%= link_to(image_tag('/change_music_btn.png', class: "change_music_btn"), workout_index_path(:theme => @select)) %>

  <div class="timer">
  <div id="id_disp"></div>
  <div class="ui_box">
    <input type="text" id="h_box" value="">H
    <input type="text" id="m_box" value="">M <br/>
    <input type="image" src="/start.png" id="id_start">
    <input type="image" src="/stop.png" id="id_stop">
    <!-- <button id="id_clear">CLEAR</button> -->
  </div>
  </div>
  <div id="container"></div>

  </div>

</div>

<script src="https://rawgit.com/kimmobrunfeldt/progressbar.js/master/dist/progressbar.js"></script>

<script>
// タイマーの動作・停止の状態を表すフラグ
var isRunning;
var init;
// タイマーID
var timerId;
// 残り時間（秒数）、分、秒
var secs, h, m, s;
var bar;

// [スタート]ボタン押下時に呼出されるメソッド
function startTimer() {
  if(isRunning == true)
    return;
  else
    isRunning = true;

  if(init == false) {
    var hour=document.getElementById("h_box").value;
    var min=document.getElementById("m_box").value;
    secs = hour*3600 + min*60;
    m = s = 0;
    bar = new ProgressBar.Line(container, {
      strokeWidth: 4,
      easing: 'easeInOut',
      duration: secs*1000,
      color: '#0DFF92',
      trailColor: '#eee',
      trailWidth: 1,
      svgStyle: {width: '100%', height: '100%'}
    });
    init=true;
  }

  // 1秒毎に残り時間を表示
  timerId = setInterval(function() {
    console.log(secs)
    secs--;
    h = Math.floor(secs / 3600);
    m = Math.floor(secs / 60) - h * 60;
    s = secs % 60;
    if(h < 10)
      h = "0" + h;
    if(m < 10)
      m = "0" + m;
    if(s < 10)
      s = "0" + s;
    $("id_disp").innerHTML = "<span>"+ h + ":" + m + ":" + s + "</span>";
    if(secs == 0) {
      alert("Good job!!");
      clearTimer();
    }
  }, 1000);

  bar.animate(1.0);
}

// [ストップ]ボタン押下時に呼出されるメソッド
function stopTimer() {
  if(isRunning == false) {
    return;
  } else {
    clearInterval(timerId);
    bar.stop()
    isRunning = false;
  }
}

// タイマー終了時に呼出されるメソッド
function clearTimer() {
  clearInterval(timerId);
  secs = 180;
  m = s = 0;
  $("id_disp").innerHTML = "00:00";
  isRunning = false;
}

function $(id) {
  return document.getElementById(id);
}

function init() {
  // 変数の初期化
  isRunning = false;
  init = false;
  // イベントリスナの登録
  $("id_start").addEventListener("click", startTimer, false);
  $("id_stop").addEventListener("click", stopTimer, false);
}

window.onload = init;

function re_select() {
	window.location.href = "/select"
}

function change_music() {
	location.reload();
}
</script>
